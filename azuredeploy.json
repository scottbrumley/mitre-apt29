{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "utcValue": {
      "type": "string",
      "metadata": {
        "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
      },
      "defaultValue": "[utcNow()]"
    },
    "pickScenario": {
      "type": "string",
      "allowedValues": [
        "Day1",
        "Day2"
      ],
      "metadata": {
        "description": "The Evaluations emulation is split into two distinct scenarios (Days 1 and 2) to reflect these differing operational flows and toolkits used by APT29."
      }
    },
    "setDataPipeline": {
      "type": "string",
      "defaultValue": "WEF-LOGSTASH-EVENTHUB",
      "allowedValues": [
        "",
        "WEF-LOGSTASH-EVENTHUB",
        "AZURESENTINEL"
      ],
      "metadata": {
        "description": "The specific data pipeline that you would like to use to aggregate and analyze security events"
      }
    },
    "useCalderaDIY": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Do you want to use the Caldear DIY Plugin? Reference: https://github.com/mitre-attack/attack-arsenal/tree/master/adversary_emulation/APT29/CALDERA_DIY/evals"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for all Virtual Machines."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for all Virtual Machines. If you want to enable SSH key authentication for Linux virtual machines, make sure you set the 'linuxAuthenticationType' parameter to 'sshPublicKey' and provide the SSH Public Key string via the 'linuxAdminKey' parameter."
      }
    },
    "linuxAuthenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Linux Virtual Machine. SSH key is recommended."
      }
    },
    "linuxAdminKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key to authenticate against Linux Virtual Machines. Provide the SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
      },
      "defaultValue": ""
    },
    "windowsDesktopSKU": {
      "type": "string",
      "defaultValue": "19h1-pro",
      "metadata": {
        "description": "The Windows virtual machine release distribution. (e.g. Version 1903 -> 19h1)"
      }
    },
    "windowsDesktopVersion": {
      "type": "string",
      "defaultValue": "latest"
    },
    "windowsDesktopVmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "allowedValues": [
        "Standard_B2s",
        "Standard_A3"
      ],
      "metadata": {
        "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
      }
    },
    "windowsServerSKU": {
      "type": "string",
      "defaultValue": "2019-Datacenter",
      "allowedValues": [
        "2019-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the Server VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "windowsServerVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "latest"
      ]
    },
    "windowsServerVmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "allowedValues": [
        "Standard_B2s",
        "Standard_A3"
      ],
      "metadata": {
        "description": "Size of the virtual machine."
      }
    },
    "ubuntuSKU": {
      "type": "string",
      "defaultValue": "18.04-LTS",
      "allowedValues": [
        "12.04.5-LTS",
        "14.04.5-LTS",
        "16.04.0-LTS",
        "18.04-LTS",
        "19.04"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
      }
    },
    "linuxVmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "allowedValues": [
        "Standard_B2s",
        "Standard_A3"
      ],
      "metadata": {
        "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/OTRF/SimuLand/master/",
      "metadata": {
        "description": "The location of resources, such as templates and DSC modules, that the template depends on"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
      }
    },
    "domainFQDN": {
      "type": "string",
      "defaultValue": "dmevals.local",
      "metadata": {
        "description": "The FQDN of the Active Directory Domain to be created"
      }
    },
    "domainJoinOptions": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Set of bit flags that define the join options. Default value of 3 is a combination of NETSETUP_JOIN_DOMAIN (0x00000001) & NETSETUP_ACCT_CREATE (0x00000002) i.e. will join the domain and create the account on the domain. For more information see https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx"
      }
    },
    "clientRootCertName": {
      "type": "string",
      "metadata": {
        "description": "The name of the client root certificate used to authenticate VPN clients. This is a common name used to identify the root cert."
      }
    },
    "clientRootCertData": {
      "type": "string",
      "metadata": {
        "description": "Client root certificate data used to authenticate VPN clients."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",

    "virtualNetworkNameA": "vnet-dmevals",
    "virtualNetworkAddressRangeA": "10.0.0.0/16",
    "subnetName1": "snet-corporate-warehouse",
    "subnetRange1": "10.0.0.0/24",
    "subnetRef1": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName1'))]",
    "subnetName2": "snet-branches",
    "subnetRange2": "10.0.1.0/24",
    "subnetRef2": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName2'))]",
    "subnetName3": "GatewaySubnet",
    "subnetRange3": "10.0.2.0/24",
    "subnetRef3": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName3'))]",

    "virtualNetworkGateway": "vnetgw-apt29",
    "vpnClientAddressPoolPrefix": "172.18.39.0/24",

    "virtualNetworkNameB": "vnet-attacker",
    "virtualNetworkAddressRangeB": "192.168.0.0/16",
    "subnetName4": "snet-attacker",
    "subnetRange4": "192.168.0.0/24",
    "subnetRef4": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameB'), variables('subnetName4'))]",

    "artifactsBlacksmithLocation": "https://raw.githubusercontent.com/OTRF/Blacksmith/master/",

    "customScriptExTemplateUri": "[uri(parameters('_artifactsLocation'), concat('environments/attack-evals/apt29/nestedtemplates/customScriptExtension.json', parameters('_artifactsLocationSasToken')))]",
    "dockerInstallScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/bash/Install-Docker.sh')]",
    "prepareBoxScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/misc/Prepare-Box.ps1')]",
    "enableWinAuditCategories": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/auditing/Enable-WinAuditCategories.ps1')]",
    "enablePowerShellLoggingScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/auditing/Enable-PowerShell-Logging.ps1')]",
    "installAgentScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/endpoint-software/Install-Sysmon.ps1')]",
    "downloadSACLScript": "https://raw.githubusercontent.com/OTRF/Set-AuditRule/master/Set-AuditRule.ps1",
    "setSACLScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/auditing/Set-SACLs.ps1')]",
    "setIPAddressScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/misc/Set-StaticIP.ps1')]",

    "logstashSetupScript": "[uri(parameters('_artifactsLocation'), concat('environments/attack-evals/apt29/scripts/Set-Logstash.sh', parameters('_artifactsLocationSasToken')))]",
    "installLogShipperScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/endpoint-software/Install-Log-Shipper.ps1')]",

    "nxlogConfig": "[uri(variables('artifactsBlacksmithLocation'), 'resources/configs/nxlog/nxlogWEC.conf')]",
    "wefSubscriptionsUrl": "[uri(variables('artifactsBlacksmithLocation'), 'resources/configs/wef/subscriptions.zip')]",

    "setWallPaperScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/misc/Set-WallPaper.ps1')]",

    "endpointsDefault": [
      {
        "tag": "domainController",
        "vmName": "NEWYORK",
        "os": "windows",
        "subnetref": "[variables('subnetRef1')]",
        "ipAddress": "10.0.0.4",
        "vmSize": "[parameters('windowsServerVmSize')]",
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "[parameters('windowsServerSKU')]",
        "version": "[parameters('windowsServerVersion')]"
      },
      {
        "tag": "workstation",
        "vmName": "SCRANTON",
        "os": "windows",
        "subnetref": "[variables('subnetRef2')]",
        "ipAddress": "10.0.1.4",
        "vmSize": "[parameters('windowsDesktopVmSize')]",
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "Windows-10",
        "sku": "[parameters('windowsDesktopSKU')]",
        "version": "[parameters('windowsDesktopVersion')]"
      },
      {
        "tag": "workstation",
        "vmName": "UTICA",
        "os": "windows",
        "subnetref": "[variables('subnetRef2')]",
        "ipAddress": "10.0.1.5",
        "vmSize": "[parameters('windowsDesktopVmSize')]",
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "Windows-10",
        "sku": "[parameters('windowsDesktopSKU')]",
        "version": "[parameters('windowsDesktopVersion')]"
      },
      {
        "tag": "workstation",
        "vmName": "NASHUA",
        "os": "windows",
        "subnetref": "[variables('subnetRef2')]",
        "ipAddress": "10.0.1.6",
        "vmSize": "[parameters('windowsDesktopVmSize')]",
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "Windows-10",
        "sku": "[parameters('windowsDesktopSKU')]",
        "version": "[parameters('windowsDesktopVersion')]"
      },
      {
        "tag": "c2",
        "vmName": "TEAMSERVER",
        "os": "linux",
        "subnetref": "[variables('subnetRef4')]",
        "ipAddress": "192.168.0.4",
        "vmSize": "[parameters('linuxVmSize')]",
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "[parameters('ubuntuSKU')]",
        "version": "latest"
      }
    ],
    "endpointRedirector": [
      {
        "tag": "redirector",
        "vmName": "REDIRECTOR",
        "os": "linux",
        "subnetref": "[variables('subnetRef4')]",
        "ipAddress": "192.168.0.5",
        "vmSize": "[parameters('linuxVmSize')]",
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "[parameters('ubuntuSKU')]",
        "version": "latest"
      }
    ],

    "endpointsLogging": [
      {
        "tag": "logCollector",
        "vmName": "WEC",
        "os": "windows",
        "subnetref": "[variables('subnetRef2')]",
        "ipAddress": "10.0.1.10",
        "vmSize": "[parameters('windowsDesktopVmSize')]",
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "Windows-10",
        "sku": "[parameters('windowsDesktopSKU')]",
        "version": "[parameters('windowsDesktopVersion')]"
      },
      {
        "tag": "logShipper",
        "vmName": "LOGSTASH",
        "os": "linux",
        "subnetref": "[variables('subnetRef2')]",
        "ipAddress": "10.0.1.11",
        "vmSize": "[parameters('linuxVmSize')]",
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "[parameters('ubuntuSKU')]",
        "version": "latest"
      }
    ],

    "endpointsScenario": "[if(and(equals(parameters('pickScenario'), 'Day1'), not(parameters('useCalderaDIY'))), concat(variables('endpointsDefault'), variables('endpointRedirector')), variables('endpointsDefault'))]",
    "endpoints": "[if(contains(parameters('setDataPipeline'), 'LOGSTASH'), concat(variables('endpointsScenario'), variables('endpointsLogging')),variables('endpointsScenario'))]",

    "patientZero": "[if(equals(parameters('pickScenario'), 'Day1'), variables('endpoints')[1].vmName, variables('endpoints')[2].vmName)]",

    "domainNameArray": "[split(parameters('domainFQDN'),'.')]",
    "ouPath": "[concat('OU=Workstations; DC=', variables('domainNameArray')[0], '; DC=', variables('domainNameArray')[1])]",

    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('linuxAdminKey')]"
          }
        ]
      }
    }
  },
  "resources": [
    {
      "name": "[variables('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-11-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "condition": "[contains(parameters('setDataPipeline'), 'EVENTHUB')]",
      "name": "deployEventHub",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('artifactsBlacksmithLocation'), concat('templates/azure/EventHub/azuredeploy.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "projectName": {
            "value": "APT29"
          },
          "eventHubSku": {
            "value": "Standard"
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('setDataPipeline'), 'AZURESENTINEL')]",
      "name": "deployAzureSentinel2Go",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri('https://raw.githubusercontent.com/OTRF/','Azure-Sentinel2Go/master/azuredeploy.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "workspaceName": {
            "value": "APT29"
          },
          "enableDataConnectorsKind": {
            "value": ["SecurityInsightsSecurityEventCollectionConfiguration"]
          },
          "setSecurityCollectionTier": {
            "value": "All"
          },
          "enableWinEventProviders": {
            "value": [
              "System",
              "Microsoft-Windows-Sysmon/Operational",
              "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational",
              "Microsoft-Windows-Bits-Client/Operational",
              "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational",
              "Directory Service",
              "Microsoft-Windows-DNS-Client/Operational",
              "Microsoft-Windows-Windows Firewall With Advanced Security/Firewall",
              "Windows PowerShell",
              "Microsoft-Windows-PowerShell/Operational",
              "Microsoft-Windows-WMI-Activity/Operational"
            ]
          }
        }
      }
    },
    {
      "name": "[variables('virtualNetworkNameA')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('virtualNetworkAddressRangeA')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName1')]",
            "properties": {
              "addressPrefix": "[variables('subnetRange1')]"
            }
          },
          {
            "name": "[variables('subnetName2')]",
            "properties": {
              "addressPrefix": "[variables('subnetRange2')]"
            }
          },
          {
            "name": "[variables('subnetName3')]",
            "properties": {
              "addressPrefix": "[variables('subnetRange3')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('virtualNetworkNameB')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('virtualNetworkAddressRangeB')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName4')]",
            "properties": {
              "addressPrefix": "[variables('subnetRange4')]"
            }
          }
        ]
      }
    },
    {
      "name": "pip-gateway",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2018-11-01",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat('apt29', '-', uniquestring(resourceGroup().id, parameters('utcValue')))]"
        }
      }
    },
    {
      "name": "[variables('virtualNetworkGateway')]",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "apiVersion": "2019-11-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', 'pip-gateway')]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef3')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses','pip-gateway')]"
              }
            },
            "name": "vnetGatewayConfig"
          }
        ],
        "sku": {
          "name": "VpnGw1",
          "tier": "VpnGw1"
        },
        "gatewayType": "Vpn",
        "vpnType": "RouteBased",
        "enableBgp": "false",
        "vpnClientConfiguration": {
          "vpnClientAddressPool": {
            "addressPrefixes": [
              "[variables('vpnClientAddressPoolPrefix')]"
            ]
          },
          "vpnClientRootCertificates": [
            {
              "name": "[parameters('clientRootCertName')]",
              "properties": {
                "PublicCertData": "[parameters('clientRootCertData')]"
              }
            }
          ],
          "vpnClientProtocols": [
            "OpenVPN"
          ]
        }
      }
    },
    {
      "name": "[concat('nic-', variables('endpoints')[copyIndex()].vmName)]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2019-11-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameB'))]"
      ],
      "copy": {
        "name": "vmNetworkInterfaceCopy",
        "count": "[length(variables('endpoints'))]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('endpoints')[copyIndex()].ipAddress]",
              "subnet": {
                "id": "[variables('endpoints')[copyIndex()].subnetref]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "vnet-dmevals/peering-to-remote-vnet-attacker",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2019-11-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameB'))]",
        "[resourceId('Microsoft.Network/virtualNetworkGateways/', variables('virtualNetworkGateway'))]",
        "UpdateVNetDNS"
      ],
      "location": "[parameters('location')]",
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": false,
        "allowGatewayTransit": true,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameB'))]"
        }
      }
    },
    {
      "name": "vnet-attacker/peering-to-remote-vnet-dmevals",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2019-11-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameB'))]",
        "[resourceId('Microsoft.Network/virtualNetworkGateways/', variables('virtualNetworkGateway'))]",
        "UpdateVNetDNS"
      ],
      "location": "[parameters('location')]",
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": false,
        "allowGatewayTransit": false,
        "useRemoteGateways": true,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]"
        }
      }
    },
    {
      "name": "[variables('endpoints')[copyIndex()].vmName]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic-', variables('endpoints')[copyIndex()].vmName))]"
      ],
      "copy": {
        "name": "vmVMCopy",
        "count": "[length(variables('endpoints'))]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('endpoints')[copyIndex()].vmSize]"
        },
        "osProfile": {
          "computerName": "[variables('endpoints')[copyIndex()].vmName]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[if(equals(variables('endpoints')[copyIndex()].os, 'linux'), if(equals(parameters('linuxAuthenticationType'), 'password'), json('null'), variables('linuxConfiguration')), json('null'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('endpoints')[copyIndex()].publisher]",
            "offer": "[variables('endpoints')[copyIndex()].offer]",
            "sku": "[variables('endpoints')[copyIndex()].sku]",
            "version": "[variables('endpoints')[copyIndex()].version]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('nic-', variables('endpoints')[copyIndex()].vmName))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "condition": "[equals(variables('endpoints')[copyIndex()].os, 'windows')]",
          "name": "AntiMalware",
          "type": "extensions",
          "apiVersion": "2019-12-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('endpoints')[copyIndex()].vmName)]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Security",
            "type": "IaaSAntimalware",
            "typeHandlerVersion": "1.3",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "AntimalwareEnabled": "true",
              "Exclusions": {
                "Extensions": ".bat;.exe;.dll;.ps1;.sct;.vbs;.hta;.py;.tmp;.csproj;.scr",
                "Paths": "C:\\",
                "Processes": "powershell.exe"
              },
              "RealtimeProtectionEnabled": "false",
              "ScheduledScanSettings": {
                "isEnabled": "false",
                "scanType": "Quick",
                "day": "8",
                "time": "120"
              }
            },
            "protectedSettings": null
          }
        },
        {
          "condition": "[equals(variables('endpoints')[copyIndex()].os, 'windows')]",
          "name": "Microsoft.Azure.NetworkWatcher",
          "type": "extensions",
          "apiVersion": "2019-12-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('endpoints')[copyIndex()].vmName)]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.NetworkWatcher",
            "type": "NetworkWatcherAgentWindows",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true
          }
        }
      ]
    },
    {
      "condition": "[equals(variables('endpoints')[copyIndex()].tag, 'workstation')]",
      "name": "[concat(variables('endpoints')[copyIndex()].vmName, '/SetUpWKS')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('endpoints')[copyIndex()].vmName)]"
      ],
      "copy": {
        "name": "InitialSetUpWKSCopy",
        "count": "[length(variables('endpoints'))]"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/OTRF/SimuLand/master/environments/attack-evals/apt29/scripts/Set-Initial-Settings.ps1",
            "[variables('prepareBoxScript')]",
            "[variables('enableWinAuditCategories')]",
            "[variables('enablePowerShellLoggingScript')]",
            "[variables('installAgentScript')]",
            "[variables('downloadSACLScript')]",
            "[variables('setSACLScript')]",
            "[variables('setIPAddressScript')]",
            "[variables('setWallPaperScript')]"
          ],
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-Initial-Settings.ps1', ' ', '-ServerAddresses', ' ', variables('endpoints')[0].ipAddress)]"
        },
        "protectedSettings": {}
      }
    },
    {
      "name": "SetPatientZero",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('patientZero'), 'joindomain')]",
        "vmSetUpWEF"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('customScriptExTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "extensionName": {
            "value": "SetUpWKS"
          },
          "commandToExecute": {
            "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-Victim.ps1', ' ', '-scenario', ' ', parameters('pickScenario'), ' ', if(parameters('useCalderaDIY'), concat('-domainName', ' ', variables('domainNameArray')[0], ' ', '-useCalderaDIY'), concat('-domainName', ' ', variables('domainNameArray')[0])))]"
          },
          "fileUris": {
            "value": [
              "[uri(parameters('_artifactsLocation'), 'environments/attack-evals/apt29/scripts/Set-Victim.ps1')]",
              "[uri(parameters('_artifactsLocation'), concat('environments/attack-evals/apt29/', if(parameters('useCalderaDIY'), 'scripts/Invoke-Sandcat.ps1', concat('payloads/', if(equals(parameters('pickScenario'), 'Day1'), 'day1', 'day2'), '/victim.zip'))))]"
            ]
          },
          "vmName": {
            "value": "[variables('patientZero')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('pickScenario'), 'Day1')]",
      "name": "SetSecondVictim",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('endpoints')[3].vmName, 'joindomain')]",
        "vmSetUpWEF"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('customScriptExTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "extensionName": {
            "value": "SetUpWKS"
          },
          "commandToExecute": {
            "value": "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command \"Add-LocalGroupMember -Group Administrators -Member', ' ', variables('domainNameArray')[0],'\\pbeesly\"')]"
          },
          "fileUris": {
            "value": []
          },
          "vmName": {
            "value": "[variables('endpoints')[3].vmName]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "[concat(variables('endpoints')[0].vmName, '/SetUpDC')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('endpoints')[0].vmName)]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/OTRF/SimuLand/master/environments/attack-evals/apt29/scripts/Set-Initial-Settings.ps1",
            "[variables('prepareBoxScript')]",
            "[variables('enableWinAuditCategories')]",
            "[variables('enablePowerShellLoggingScript')]",
            "[variables('installAgentScript')]",
            "[variables('downloadSACLScript')]",
            "[variables('setSACLScript')]",
            "[variables('setWallPaperScript')]"
          ],
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-Initial-Settings.ps1',' ', '-SetDC')]"
        },
        "protectedSettings": {}
      }
    },
    {
      "condition": "[contains(parameters('setDataPipeline'), 'WEF')]",
      "name": "[concat(variables('endpointsLogging')[0].vmName, '/SetUpWEC')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "InitialSetUpWKSCopy"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/OTRF/SimuLand/master/environments/attack-evals/apt29/scripts/Set-WEC.ps1",
            "[variables('prepareBoxScript')]",
            "[variables('setIPAddressScript')]",
            "[variables('setWallPaperScript')]"
          ],
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-WEC.ps1', ' ', '-ServerAddresses', ' ', variables('endpoints')[0].ipAddress)]"
        },
        "protectedSettings": {}
      }
    },
    {
      "name": "[concat(variables('endpoints')[4].vmName, '/SetUpC2')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('endpoints')[4].vmName)]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {},
        "protectedSettings": {
          "commandToExecute": "[if(parameters('useCalderaDIY'),  concat('bash Set-Adversary.sh -s', ' ', parameters('pickScenario'), ' ', '-p'), concat('bash Set-Adversary.sh -s', ' ', parameters('pickScenario')))]",
          "fileUris": [
            "[uri(parameters('_artifactsLocation'), 'environments/attack-evals/apt29/scripts/Set-Adversary.sh')]",
            "[variables('dockerInstallScript')]",
            "[uri(parameters('_artifactsLocation'), if(parameters('useCalderaDIY'), 'environments/attack-evals/apt29/caldera/conf/4fb34bde-b06d-445a-a146-8e35f79ce546.yml', concat('environments/attack-evals/apt29/payloads/', if(equals(parameters('pickScenario'), 'Day1'), 'day1', 'day2'), '/attack-platform.zip')))]"
          ]
        }
      }
    },
    {
      "condition": "[and(equals(parameters('pickScenario'), 'Day1'), not(parameters('useCalderaDIY')))]",
      "name": "[concat(variables('endpointRedirector')[0].vmName, '/SetUpRedirector')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "InitialSetUpWKSCopy"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {},
        "protectedSettings": {
          "commandToExecute": "[concat('bash Set-Socat.sh -i', ' ', variables('endpoints')[4].ipAddress)]",
          "fileUris": [
            "https://raw.githubusercontent.com/OTRF/SimuLand/master/environments/attack-evals/apt29/scripts/Set-Socat.sh"
          ]
        }
      }
    },
    {
      "condition": "[contains(parameters('setDataPipeline'), 'LOGSTASH-EVENTHUB')]",
      "name": "[concat(variables('endpointsLogging')[1].vmName, '/SetUpLogstash')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('endpointsLogging')[1].vmName)]",
        "deployEventHub"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {},
        "protectedSettings": {
          "commandToExecute": "[if(contains(parameters('setDataPipeline'), 'LOGSTASH'), concat('bash Set-Logstash.sh -n', ' ', reference('deployEventHub').outputs.EventHubNamespace.value , ' ', '-c', ' ', '\"', reference('deployEventHub').outputs.NamespaceConnectionString.value, '\"', ' ', '-e', ' ', reference('deployEventHub').outputs.EventHubName.value, ' ', '-u', ' ', parameters('adminUsername')), 'Resource not deployed')]",
          "fileUris": [
            "[variables('logstashSetupScript')]",
            "[variables('dockerInstallScript')]"
          ]
        }
      }
    },
    {
      "name": "[concat(variables('endpoints')[0].vmName, '/CreateADForest')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('endpoints')[0].vmName, 'AntiMalware')]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('endpoints')[0].vmName, 'SetUpDC')]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.19",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "ModulesUrl": "[uri(variables('artifactsBlacksmithLocation'), concat('resources/scripts/powershell/active-directory/DSC/CreateADPDC.zip', parameters('_artifactsLocationSasToken')))]",
          "ConfigurationFunction": "CreateADPDC.ps1\\CreateADPDC",
          "Properties": {
            "DomainName": "[parameters('domainFQDN')]",
            "AdminCreds": {
              "UserName": "[parameters('adminUsername')]",
              "Password": "PrivateSettingsRef:AdminPassword"
            }
          }
        },
        "protectedSettings": {
          "Items": {
            "AdminPassword": "[parameters('adminPassword')]"
          }
        }
      }
    },
    {
      "name": "UpdateVNetDNS",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('endpoints')[0].vmName, 'CreateADForest')]",
        "[concat('Microsoft.Network/virtualNetworkGateways/', variables('virtualNetworkGateway'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('environments/attack-evals/apt29/nestedtemplates/vnet-dns-server.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkNameA')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[variables('virtualNetworkAddressRangeA')]"
          },
          "subnetName1": {
            "value": "[variables('subnetName1')]"
          },
          "subnetRange1": {
            "value": "[variables('subnetRange1')]"
          },
          "subnetName2": {
            "value": "[variables('subnetName2')]"
          },
          "subnetRange2": {
            "value": "[variables('subnetRange2')]"
          },
          "subnetName3": {
            "value": "[variables('subnetName3')]"
          },
          "subnetRange3": {
            "value": "[variables('subnetRange3')]"
          },
          "DNSServerAddress": {
            "value": [
              "[variables('endpoints')[0].ipAddress]"
            ]
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "ADSetup",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "UpdateVNetDNS"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('customScriptExTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "extensionName": {
            "value": "SetUpDC"
          },
          "commandToExecute": {
            "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-AD.ps1',' ', '-domainFQDN',' ', parameters('domainFQDN'),' ', '-dcVMName',' ', variables('endpoints')[0].vmName)]"
          },
          "fileUris": {
            "value": [
              "https://raw.githubusercontent.com/OTRF/SimuLand/master/environments/attack-evals/apt29/scripts/Set-AD.ps1",
              "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/active-directory/Set-OUs.ps1')]",
              "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/active-directory/Add-DomainUsers.ps1')]",
              "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/auditing/Set-AuditSAMRemoteCalls.ps1')]"
            ]
          },
          "vmName": {
            "value": "[variables('endpoints')[0].vmName]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[or(equals(variables('endpoints')[copyIndex()].tag, 'workstation'), equals(variables('endpoints')[copyIndex()].tag, 'logCollector'))]",
      "name": "[concat(variables('endpoints')[copyIndex()].vmName,'/joindomain')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "InitialSetUpWKSCopy",
        "ADSetup",
        "UpdateVNetDNS"
      ],
      "copy": {
        "name": "vmDomainJoinCopy",
        "count": "[length(variables('endpoints'))]"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('domainFQDN')]",
          "User": "[concat(parameters('domainFQDN'), '\\', parameters('adminUsername'))]",
          "Restart": "true",
          "Options": "[parameters('domainJoinOptions')]",
          "OUPath": "[variables('ouPath')]"
        },
        "protectedSettings": {
          "Password": "[parameters('adminPassword')]"
        }
      }
    },
    {
      "condition": "[contains(parameters('setDataPipeline'), 'WEF')]",
      "name": "ConfigureWEC",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "vmDomainJoinCopy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('customScriptExTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "extensionName": {
            "value": "SetUpWEC"
          },
          "commandToExecute": {
            "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Configure-WEC.ps1',' ', '-SubscriptionsUrl',' ', variables('wefSubscriptionsUrl'))]"
          },
          "fileUris": {
            "value": [
              "[uri(variables('artifactsBlacksmithLocation'), concat('resources/scripts/powershell/auditing/Configure-WEC.ps1', parameters('_artifactsLocationSasToken')))]"
            ]
          },
          "vmName": {
            "value": "[variables('endpointsLogging')[0].vmName]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[contains(parameters('setDataPipeline'), 'WEF-LOGSTASH')]",
      "name": "SetUpWECLogstash",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "ConfigureWEC",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('endpointsLogging')[1].vmName, 'SetUpLogstash')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('customScriptExTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "extensionName": {
            "value": "SetUpWEC"
          },
          "commandToExecute": {
            "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Install-Log-Shipper.ps1', ' ', '-DestinationIP', ' ', variables('endpointsLogging')[1].ipAddress, ' ', '-ShipperAgent Nxlog', ' ', '-ConfigUrl', ' ', variables('nxlogConfig'))]"
          },
          "fileUris": {
            "value": [
              "[variables('installLogShipperScript')]"
            ]
          },
          "vmName": {
            "value": "[variables('endpointsLogging')[0].vmName]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[and(contains(parameters('setDataPipeline'), 'WEF'),or(equals(variables('endpoints')[copyIndex()].tag, 'workstation'), equals(variables('endpoints')[copyIndex()].tag, 'domainController')))]",
      "name": "[concat(variables('endpoints')[copyIndex()].vmName, '-SetUpWEF')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "ConfigureWEC"
      ],
      "copy": {
        "name": "vmSetUpWEF",
        "count": "[length(variables('endpoints'))]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('customScriptExTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "extensionName": {
            "value": "[if(equals(variables('endpoints')[copyIndex()].tag, 'workstation'), 'SetUpWks', 'SetUpDC')]"
          },
          "commandToExecute": {
            "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Configure-WEF-Client.ps1',' ', '-domainFQDN',' ', parameters('domainFQDN'), ' ', '-WECNetBIOSName', ' ', variables('endpointsLogging')[0].vmName)]"
          },
          "fileUris": {
            "value": [
              "[uri(variables('artifactsBlacksmithLocation'), concat('resources/scripts/powershell/auditing/Configure-WEF-Client.ps1', parameters('_artifactsLocationSasToken')))]"
            ]
          },
          "vmName": {
            "value": "[variables('endpoints')[copyIndex()].vmName]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[and(equals(parameters('setDataPipeline'), 'AZURESENTINEL'), equals(variables('endpoints')[copyIndex()].os, 'windows'))]",
      "name": "[concat(variables('endpoints')[copyIndex()].vmName,'/LogAnalytics.Agent')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('endpoints')[copyIndex()].vmName, 'joindomain')]"
      ],
      "copy": {
        "name": "LogAnalyticsAgentCopy",
        "count": "[length(variables('endpoints'))]"
      },
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(equals(parameters('setDataPipeline'), 'AZURESENTINEL'), reference('deployAzureSentinel2Go').outputs.workspaceIdOutput.value, 'Resource not deployed')]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(equals(parameters('setDataPipeline'), 'AZURESENTINEL'), reference('deployAzureSentinel2Go').outputs.workspaceKeyOutput.value, 'Resource not deployed')]"
        }
      }
    }
  ],
  "outputs": {
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "storageAccountUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
    },
    "endpointsDeployed": {
      "type": "array",
      "value": "[variables('endpoints')]"
    }
  }
}